<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.teamproject.mapper.ManagerMapper">

	<!-- 	메인 페이지에 넣을 프로젝트 리스트 -->
	<select id="getMainProList" resultType="com.teamproject.domain.ProjectDTO">
		select * from project_board 
		where pboard_state = '모집중'
		order by pboard_date DESC
		limit 0,7
	</select>
	
	<!-- 프로젝트의 스킬 목록들 -->
    <select id="getMainProSkill" resultType="com.teamproject.domain.ProjectSkillDTO">
        SELECT s.skill_id, s.skill_name
        FROM project_skill p JOIN skills s
        ON p.skill_id = s.skill_id
        WHERE p.pboard_id = #{pboard_id};
    </select>
	
	<!-- 	FreelancerMapper의 selectFreelancer_all를 복사함 -->
	<!-- 	메인 페이지에 넣을 프리랜서 리스트 -->
	<select id="getMainFreeList" resultType="com.teamproject.domain.FreelancerDTO">
		select f.*, CASE 
            WHEN CHAR_LENGTH(ui.user_name) = 2 THEN 
                CONCAT(SUBSTRING(ui.user_name, 1, 1), '*')
            WHEN CHAR_LENGTH(ui.user_name) = 3 THEN 
                CONCAT(SUBSTRING(ui.user_name, 1, 1), '*', SUBSTRING(ui.user_name, 3, 1))
            WHEN CHAR_LENGTH(ui.user_name) > 3 THEN 
                CONCAT(SUBSTRING(ui.user_name, 1, 1), REPEAT('*', CHAR_LENGTH(ui.user_name) - 2), SUBSTRING(ui.user_name, CHAR_LENGTH(ui.user_name), 1))
            ELSE ui.user_name
          END AS user_name
		from freelancer f
		LEFT JOIN user_info ui ON f.user_no = ui.user_no
		where freelancer_state = '구직중'
		order by freelancer_date DESC
		limit 0,7;
	</select>
	
	<!-- 프리랜서의 스킬 목록들 -->
    <select id="getMainFreeSkill" resultType="com.teamproject.domain.FreelancerSkillDTO">
        SELECT s.skill_id, s.skill_name
        FROM freelancer_skill f JOIN skills s
        ON f.skill_id = s.skill_id
        WHERE f.freelancer_id = #{freelancer_id};
    </select>

	<!-- 	미승인된 요청 프리랜서를 전달함 -->
	<select id="getRqfList" resultType="com.teamproject.domain.ProjectRequestDTO">
		select * from request_freelancer 
		where f_request_isAgree = 0 
		order by f_request_Date ASC
		limit #{startRow},#{pageSize}
	</select>
	
	<!-- 	미승인된 요청 프리랜서의 수를 전달함 -->
	<select id="getRqfCount" resultType="java.lang.Integer">
		select count(*) from request_freelancer	
		where f_request_isAgree = 0	
	</select>
	
	<!-- 	요청 프리랜서 승인 -->
	<update id="freelancerApprove">
		update request_freelancer
		set f_request_isAgree = 1
		where pboard_id = #{pboard_id}
	</update>
	
	<!-- 	미승인된 요청 프로젝트를 전달함 -->
	<select id="getRqcList" resultType="com.teamproject.domain.FreelancerRequestDTO">
		select * from request_client 
		where cl_request_isAgree = 0 
		order by cl_request_Date ASC
		limit #{startRow},#{pageSize}
	</select>
	
	<!-- 	미승인된 요청 프로젝트의 수를 전달함 -->
	<select id="getRqcCount" resultType="java.lang.Integer">
		select count(*) from request_client
		where cl_request_isAgree = 0	
	</select>
	
	<!-- 	공지사항 목록을 전달함 -->
	<select id="getNcoList" resultType="com.teamproject.domain.CommunityDTO">
		select * from community_notice 
		order by ncommunity_date DESC
		limit #{startRow},#{pageSize}
	</select>
	
	<!-- 	공지사항의 수를 전달함 -->
	<select id="getNcoCount" resultType="java.lang.Integer">
		select count(*) from community_notice
	</select>
	
	<!-- 	미답변 질문 게시판 목록을 전달함 -->
	<select id="getQcoList" resultType="com.teamproject.domain.CommunityQnaDTO">
		select * from community_QnA 
		where qcommunity_answer is NULL
		order by qcommunity_date DESC
		limit #{startRow},#{pageSize}
	</select>
	
	<!-- 	질문 게시글의 수를 전달함 -->
	<select id="getQcoCount" resultType="java.lang.Integer">
		select count(*) from community_QnA
	</select>
	
	<!-- 	회원을 전달함 -->
	<select id="getUserList" resultType="com.teamproject.domain.MemberDTO">
		select * from user_info 
		<if test='key != 0'>
			where user_no = #{key}
		</if>
		order by join_date DESC
		limit #{startRow},#{pageSize}
	</select>
	
	<!-- 	회원 수를 전달함 -->
	<select id="getUserCount" resultType="java.lang.Integer">
		select count(*) from user_info
	</select>
	
<!-- 	특정 회원 정보를 전달함 -->
	<select id="getUserInfo" resultType="com.teamproject.domain.MemberDTO">
		select * from user_info
		where user_no = #{user_no}
	</select>
	
<!-- 	특정 회원이 작성한 프로젝트를 전달함 -->
	<select id="getUserProList" resultType="com.teamproject.domain.ProjectDTO">
		select * from project_board 
		where user_no = #{key}
		order by pboard_date DESC
		limit #{startRow},#{pageSize}
	</select>
	
<!-- 	특정 회원이 작성한 프로젝트 수를 전달함 -->
	<select id="getUserProCount" resultType="java.lang.Integer">
		select count(*) from project_board
		where user_no = #{key}
	</select>
	
<!-- 	특정 회원이 작성한 프리랜서를 전달함 -->
	<select id="getUserFreeList" resultType="com.teamproject.domain.FreelancerDTO">
		select * from freelancer 
		where user_no = #{key}
		order by freelancer_date DESC
		limit #{startRow},#{pageSize}
	</select>
	
<!-- 	특정 회원이 작성한 프리랜서 수를 전달함 -->
	<select id="getUserFreeCount" resultType="java.lang.Integer">
		select count(*) from freelancer
		where user_no = #{key}
	</select>
	
<!-- 	특정 회원이 작성한 질문 글을 전달함 -->
	<select id="getUserQnaList" resultType="com.teamproject.domain.CommunityQnaDTO">
		select * from community_QnA 
		where user_no = #{key}
		order by qcommunity_date DESC
		limit #{startRow},#{pageSize}
	</select>
	
<!-- 	특정 회원이 작성한 질문 글 수를 전달함 -->
	<select id="getUserQnaCount" resultType="java.lang.Integer">
		select count(*) from community_QnA
		where user_no = #{key}
	</select>
	
<!-- 	회원을 차단함 -->
	<update id="blackUser">
		update user_info
		set user_yn = 1
		where user_no = #{user_no}
	</update>
	
<!-- 	회원 차단을 해제함 -->
	<update id="whiteUser">
		update user_info
		set user_yn = 0
		where user_no = #{user_no}
	</update>
</mapper>
